import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';
export declare class CountUpDirective implements OnDestroy {
    private cd;
    countDuration: number;
    countPrefix: string;
    countSuffix: string;
    valueFormatting: any;
    set countDecimals(val: number);
    get countDecimals(): number;
    set countTo(val: any);
    get countTo(): any;
    set countFrom(val: any);
    get countFrom(): any;
    countChange: EventEmitter<any>;
    countFinish: EventEmitter<any>;
    nativeElement: any;
    value: any;
    formattedValue: string;
    private animationReq;
    private _countDecimals;
    private _countTo;
    private _countFrom;
    constructor(cd: ChangeDetectorRef, element: ElementRef);
    ngOnDestroy(): void;
    start(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CountUpDirective>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CountUpDirective, "[ngx-charts-count-up]", never, {
    "countDuration": "countDuration";
    "countPrefix": "countPrefix";
    "countSuffix": "countSuffix";
    "countDecimals": "countDecimals";
    "countTo": "countTo";
    "countFrom": "countFrom";
    "valueFormatting": "valueFormatting";
}, {
    "countChange": "countChange";
    "countFinish": "countFinish";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvdW50LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIENvdW50IHVwIGNvbXBvbmVudFxuICpcbiAqIExvb3NlbHkgaW5zcGlyZWQgYnk6XG4gKiAgLSBodHRwczovL2dpdGh1Yi5jb20vaXp1cGV0L2FuZ3VsYXIyLWNvdW50b1xuICogIC0gaHR0cHM6Ly9pbm9yZ2FuaWsuZ2l0aHViLmlvL2NvdW50VXAuanMvXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkO1xuICAgIGNvdW50RHVyYXRpb246IG51bWJlcjtcbiAgICBjb3VudFByZWZpeDogc3RyaW5nO1xuICAgIGNvdW50U3VmZml4OiBzdHJpbmc7XG4gICAgdmFsdWVGb3JtYXR0aW5nOiBhbnk7XG4gICAgc2V0IGNvdW50RGVjaW1hbHModmFsOiBudW1iZXIpO1xuICAgIGdldCBjb3VudERlY2ltYWxzKCk6IG51bWJlcjtcbiAgICBzZXQgY291bnRUbyh2YWw6IGFueSk7XG4gICAgZ2V0IGNvdW50VG8oKTogYW55O1xuICAgIHNldCBjb3VudEZyb20odmFsOiBhbnkpO1xuICAgIGdldCBjb3VudEZyb20oKTogYW55O1xuICAgIGNvdW50Q2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb3VudEZpbmlzaDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmF0aXZlRWxlbWVudDogYW55O1xuICAgIHZhbHVlOiBhbnk7XG4gICAgZm9ybWF0dGVkVmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIGFuaW1hdGlvblJlcTtcbiAgICBwcml2YXRlIF9jb3VudERlY2ltYWxzO1xuICAgIHByaXZhdGUgX2NvdW50VG87XG4gICAgcHJpdmF0ZSBfY291bnRGcm9tO1xuICAgIGNvbnN0cnVjdG9yKGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzdGFydCgpOiB2b2lkO1xufVxuIl19